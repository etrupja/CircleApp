@page "/register"
@using CircleApp.ViewModels.Authentication
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager Navigation

<EditForm Model="registerVM" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="sm:flex">
        <div class="relative lg:w-[580px] md:w-96 w-full p-10 min-h-screen bg-white shadow-xl flex items-center pt-10 z-10">
            <div class="w-full lg:max-w-sm mx-auto space-y-10">
                <div>
                    <h2 class="text-2xl font-semibold mb-1.5">Sign up to get started</h2>
                    <p class="text-sm text-gray-700 font-normal">If you already have an account, <a href="/login" class="text-blue-700">Login here!</a></p>
                </div>

                <div class="space-y-7 text-sm text-black font-medium">
                    <div>
                        <label for="firstName">First name</label>
                        <div class="mt-2.5">
                            <InputText id="firstName" @bind-Value="registerVM.FirstName" placeholder="First name" class="!w-full" />
                            <ValidationMessage For="@(() => registerVM.FirstName)" class="text-red-500 text-xs mt-1" />
                        </div>
                    </div>
                    <div>
                        <label for="lastName">Last name</label>
                        <div class="mt-2.5">
                            <InputText id="lastName" @bind-Value="registerVM.LastName" placeholder="Last name" class="!w-full" />
                            <ValidationMessage For="@(() => registerVM.LastName)" class="text-red-500 text-xs mt-1" />
                        </div>
                    </div>
                    <div>
                        <label for="email">Email address</label>
                        <div class="mt-2.5">
                            <InputText id="email" @bind-Value="registerVM.Email" type="email" placeholder="Email" class="!w-full" />
                            <ValidationMessage For="@(() => registerVM.Email)" class="text-red-500 text-xs mt-1" />
                        </div>
                    </div>
                    <div>
                        <label for="password">Password</label>
                        <div class="mt-2.5">
                            <InputText id="password" @bind-Value="registerVM.Password" type="password" placeholder="***" class="!w-full" />
                            <ValidationMessage For="@(() => registerVM.Password)" class="text-red-500 text-xs mt-1" />
                        </div>
                    </div>
                    <div>
                        <label for="confirmPassword">Confirm password</label>
                        <div class="mt-2.5">
                            <InputText id="confirmPassword" @bind-Value="registerVM.ConfirmPassword" type="password" placeholder="***" class="!w-full" />
                            <ValidationMessage For="@(() => registerVM.ConfirmPassword)" class="text-red-500 text-xs mt-1" />
                        </div>
                    </div>

                    <div>
                        <button type="submit" class="button bg-primary text-white w-full">Register</button>
                    </div>

                    <div class="text-center flex items-center gap-6">
                        <hr class="flex-1 border-slate-200">
                        Or continue with
                        <hr class="flex-1 border-slate-200">
                    </div>

                    <div class="flex gap-2">
                        <button @onclick="() => ExternalLogin("Google")" class="button flex-1 flex items-center gap-2 bg-primary text-white text-sm"> <ion-icon name="logo-google" class="text-lg"></ion-icon> google </button>
                        <button @onclick="() => ExternalLogin("GitHub")" class="button flex-1 flex items-center gap-2 bg-black text-white text-sm"><ion-icon name="logo-github" class="text-lg"></ion-icon> github </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="flex-1 relative bg-primary max-md:hidden">
            <div class="relative w-full h-full" tabindex="-1" uk-slideshow="animation: slide; autoplay: true">
                <ul class="uk-slideshow-items w-full h-full">
                    <li class="w-full">
                        <img src="~/images/welcome/welcome-03.png" alt="" class="w-full h-full object-cover uk-animation-kenburns uk-animation-reverse uk-transform-origin-center-left">
                        <div class="absolute bottom-0 w-full uk-transition-slide-bottom-small z-10">
                            <div class="max-w-xl w-full mx-auto pb-32 px-5 z-30 relative">
                                <h4 class="!text-white text-2xl font-semibold mt-7" uk-slideshow-parallax="y: 600,0,0">Connect with Friends</h4>
                                <p class="!text-white text-lg mt-7 leading-8" uk-slideshow-parallax="y: 800,0,0;">Bridge the gap between miles and moments—connect with friends and weave memories together, one click at a time.</p>
                            </div>
                        </div>
                        <div class="w-full h-96 bg-gradient-to-t from-black absolute bottom-0 left-0"></div>
                    </li>
                    <li class="w-full">
                        <img src="~/images/welcome/welcome-04.png" alt="" class="w-full h-full object-cover uk-animation-kenburns uk-animation-reverse uk-transform-origin-center-left">
                        <div class="absolute bottom-0 w-full uk-transition-slide-bottom-small z-10">
                            <div class="max-w-xl w-full mx-auto pb-32 px-5 z-30 relative">
                                <h4 class="!text-white text-2xl font-semibold mt-7" uk-slideshow-parallax="y: 800,0,0">  Connect With Friends </h4>
                                <p class="!text-white text-lg mt-7 leading-8" uk-slideshow-parallax="y: 800,0,0;"> Rekindle old ties and spark new ones—your next 'Remember when...' moment is just a friend request away.</p>
                            </div>
                        </div>
                        <div class="w-full h-96 bg-gradient-to-t from-black absolute bottom-0 left-0"></div>
                    </li>
                </ul>
                <div class="flex justify-center">
                    <ul class="inline-flex flex-wrap justify-center  absolute bottom-8 gap-1.5 uk-dotnav uk-slideshow-nav"> </ul>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private RegisterVM registerVM = new RegisterVM();

    private async Task HandleRegister()
    {
        var newUser = new User()
        {
            FullName = $"{registerVM.FirstName} {registerVM.LastName}",
            Email = registerVM.Email,
            UserName = registerVM.Email
        };

        var existingUser = await UserManager.FindByEmailAsync(registerVM.Email);
        if (existingUser != null)
        {
            // Handle email already exists
            return;
        }

        var result = await UserManager.CreateAsync(newUser, registerVM.Password);

        if (result.Succeeded)
        {
            await UserManager.AddToRoleAsync(newUser, "User");
            await UserManager.AddClaimAsync(newUser, new Claim("FullName", newUser.FullName));
            await SignInManager.SignInAsync(newUser, isPersistent: false);
            Navigation.NavigateTo("/");
        }
        else
        {
            // Handle registration errors
        }
    }

    private void ExternalLogin(string provider)
    {
        var redirectUrl = Navigation.ToAbsoluteUri("/externallogincallback");
        var properties = SignInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl.ToString());
        Navigation.NavigateTo(properties.RedirectUri);
    }
}
