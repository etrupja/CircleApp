@page "/post/{PostId:int}"
@inject IPostsService PostsService
@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public int PostId { get; set; }

    private Post post;
    private bool isLiked;
    private bool isFavorited;
    private bool isPrivate;
    private bool isReported;
    private string displayTime;

    protected override async Task OnInitializedAsync()
    {
        post = await PostsService.GetPostByIdAsync(PostId);
        if (post == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var loggedInUserId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        isLiked = post.Likes.Any(n => n.UserId == loggedInUserId);
        isFavorited = post.Favorites.Any(n => n.UserId == loggedInUserId);
        isPrivate = post.IsPrivate == true && post.UserId == loggedInUserId;
        isReported = post.Reports.Any(n => n.UserId == loggedInUserId);

        TimeSpan timeSpanSincePosted = DateTime.UtcNow.Subtract(post.DateCreated);
        displayTime = timeSpanSincePosted switch
        {
            var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
            var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
            var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
            _ => "Just now"
        };
    }

    private async Task ToggleLike()
    {
        var loggedInUserId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        await PostsService.TogglePostLikeAsync(PostId, loggedInUserId);
        isLiked = !isLiked;
    }

    private async Task ToggleFavorite()
    {
        var loggedInUserId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        await PostsService.TogglePostFavoriteAsync(PostId, loggedInUserId);
        isFavorited = !isFavorited;
    }

    private async Task AddComment(string content)
    {
        var loggedInUserId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        var newComment = new Comment
        {
            UserId = loggedInUserId,
            PostId = PostId,
            Content = content,
            DateCreated = DateTime.UtcNow,
            DateUpdated = DateTime.UtcNow
        };
        await PostsService.AddPostCommentAsync(newComment);
        post.Comments.Add(newComment);
    }

    private async Task RemoveComment(int commentId)
    {
        await PostsService.RemovePostCommentAsync(commentId);
        var comment = post.Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null)
        {
            post.Comments.Remove(comment);
        }
    }

    private async Task ReportPost()
    {
        var loggedInUserId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        await PostsService.ReportPostAsync(PostId, loggedInUserId);
        isReported = true;
    }

    private async Task ToggleVisibility()
    {
        var loggedInUserId = int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        await PostsService.TogglePostVisibilityAsync(PostId, loggedInUserId);
        isPrivate = !isPrivate;
    }
}

<div class="bg-white rounded-xl shadow-sm text-sm font-medium border1">
    <div class="flex gap-3 sm:p-4 p-2.5 text-sm font-medium">
        <a href="/users/details/@post.UserId">
            <img src="@(!string.IsNullOrEmpty(post.User.ProfilePictureUrl) ? post.User.ProfilePictureUrl : "/images/avatar/user.png")" class="w-9 h-9 rounded-full" />
        </a>
        <div class="flex-1">
            <a href="/users/details/@post.UserId">
                <h4 class="text-black">@post.User.FullName</h4>
                <div class="text-xs text-gray-500/80" title="@post.DateCreated.ToString("MM/dd/yyyy HH:mm")"> @displayTime </div>
            </a>
        </div>
        <div class="-mr-1">
            <button type="button" class="button-icon w-8 h-8"> <ion-icon class="text-xl" name="ellipsis-horizontal"></ion-icon> </button>
            <div class="w-[245px] post-options-dropdown" uk-dropdown="pos: bottom-right; animation: uk-animation-scale-up uk-transform-origin-top-right; animate-out: true; mode: click">
                @if (post.UserId == int.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier)))
                {
                    <button @onclick="ToggleVisibility" class="hover:!bg-red-50 icon-link">
                        <ion-icon name="@(isPrivate ? "lock-open-outline" : "lock-closed-outline")"></ion-icon>  Set as @(isPrivate ? "public" : "private")
                    </button>
                    <hr>
                    <button @onclick="() => RemovePost(post.Id)" class="text-red-400 hover:!bg-red-50 delete-post-btn">
                        <ion-icon name="trash-bin-outline"></ion-icon>  Delete Post
                    </button>
                }
                @if (!isReported)
                {
                    <button @onclick="ReportPost" class="hover:!bg-red-50 icon-link">
                        <ion-icon class="text-xl shrink-0" name="flag-outline"></ion-icon>  Report
                    </button>
                }
            </div>
        </div>
    </div>
    <a href="/home/details/@post.Id">
        <div class="sm:px-4 p-2.5 pt-0 w-full">
            <p class="font-normal">
                @post.Content
            </p>
        </div>
    </a>
    @if (!string.IsNullOrEmpty(post.ImageUrl))
    {
        <a href="/home/details/@post.Id">
            <div class="relative w-full h-full">
                <img src="@post.ImageUrl" class="sm:rounded-lg w-full h-full object-cover" />
            </div>
        </a>
    }
    <div class="sm:p-4 p-2.5 flex items-center gap-4 text-xs font-semibold">
        <div class="flex items-center gap-2.5">
            <button @onclick="ToggleLike" class="button-icon @(isLiked ? "text-red-500 bg-red-100" : "")">
                <ion-icon class="text-lg" name="@(isLiked ? "heart" : "heart-outline")"></ion-icon>
            </button>
            <a href="#">@post.Likes.Count</a>
        </div>
        <div class="flex items-center gap-3">
            <a class="button-icon">
                <ion-icon class="text-lg" name="chatbubble-ellipses-outline"></ion-icon>
            </a>
            <a href="#">@post.Comments.Count</a>
        </div>
        <div class="ml-auto"></div>
        <div class="flex items-center gap-2">
            <button @onclick="ToggleFavorite" class="button-icon ml-auto @(isFavorited ? "text-orange-500 bt-orange-100":"")">
                <ion-icon class="text-lg" name="@(isFavorited ? "bookmark":"bookmark-outline")"></ion-icon>
            </button>
            @if (post.Favorites.Count > 0)
            {
                <a href="#">@post.Favorites.Count</a>
            }
        </div>
    </div>
    <div>
        <div class="p-2.5 border-t border-gray-100 font-normal space-y-3 relative">
            @foreach (var comment in post.Comments.OrderByDescending(n => n.DateCreated).Take(2))
            {
                TimeSpan commentTimeSpanSincePosted = DateTime.UtcNow.Subtract(comment.DateCreated);
                string commentDisplayTime = commentTimeSpanSincePosted switch
                {
                    var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
                    var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
                    var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
                    _ => "Just now"
                };
                <div class="flex items-start gap-3 relative">
                    <a href="/users/details/@comment.UserId">
                        <img src="@(!string.IsNullOrEmpty(comment.User.ProfilePictureUrl) ? comment.User.ProfilePictureUrl : "/images/avatar/user.png")" class="w-6 h-6 mt-1 rounded-full" />
                    </a>
                    <div class="flex-1">
                        <div class="flex justify-content-between">
                            <a href="/users/details/@comment.UserId" class="text-black font-medium inline-block flex-grow">
                                @comment.User.FullName
                            </a>
                            <small>@commentDisplayTime</small>
                        </div>
                        <div class="flex items-center justify-between">
                            <p class="mt-0.5">
                                @comment.Content
                            </p>
                            <button @onclick="() => RemoveComment(comment.Id)" class="text-red-500 text-xs ml-2" title="Remove post comment">
                                <ion-icon name="trash-outline"></ion-icon>
                            </button>
                        </div>
                    </div>
                </div>
            }
            @if (post.Comments.Count >= 3)
            {
                <div class="p-1.5">
                    <a href="/home/details/@post.Id">
                        Show all comments
                    </a>
                </div>
            }
        </div>
        <div class="sm:px-4 sm:py-3 p-2.5 border-t border-gray-100 flex items-center gap-1">
            <a href="/users/details/@post.UserId">
                <img src="@(string.IsNullOrEmpty(post.User.ProfilePictureUrl) ? "/images/avatar/user.png" : post.User.ProfilePictureUrl)" class="w-6 h-6 rounded-full" />
            </a>
            <div class="flex-1 relative overflow-hidden h-10">
                <textarea @bind="newCommentContent" placeholder="Add Comment...." rows="1" class="w-full resize-none !bg-transparent px-4 py-2 focus:!border-transparent focus:!ring-transparent"></textarea>
            </div>
            <button @onclick="() => AddComment(newCommentContent)" class="text-sm rounded-full py-1.5 px-3.5 bg-secondery">Comment</button>
        </div>
    </div>
</div>
